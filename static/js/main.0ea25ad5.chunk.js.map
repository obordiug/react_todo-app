{"version":3,"sources":["components/TodosContext/TodosContext.tsx","components/TodoPanel/TodoPanel.tsx","components/Header/Header.tsx","components/ToggleAll/ToggleAll.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/SectionMain/SectionMain.tsx","components/TodosFilter/TodosFilter.tsx","components/Footer/Footer.tsx","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["TodosContext","React","createContext","todos","setTodos","activeTodos","setActiveTodos","completedTodos","setCompletedTodos","visibleTodos","setVisibleTodos","TodosProvider","children","useState","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","filter","todo","completed","contextValue","Provider","value","TodoPanel","newTodoTitle","setNewTodoTitle","useContext","onSubmit","event","title","preventDefault","id","Date","type","className","placeholder","onChange","target","Header","ToggleAll","checked","length","map","htmlFor","TodoItem","focused","setFocused","editedTodoTitle","setEditedTodoTitle","inputEditEl","useRef","current","focus","editingTitleTodo","editedTitle","todoId","todoItem","classNames","editing","onDoubleClick","onClick","ref","onKeyDown","code","onBlur","TodoList","SectionMain","TodosFilter","filterType","setFilterType","filterTypeChange","href","selected","Footer","TodoApp","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ea25ad5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const TodosContext = React.createContext<ContextType>({\n  todos: [],\n  setTodos: () => {},\n  activeTodos: [],\n  setActiveTodos: () => {},\n  completedTodos: [],\n  setCompletedTodos: () => {},\n  visibleTodos: [],\n  setVisibleTodos: () => [],\n});\n\nexport const TodosProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>(\n    JSON.parse(localStorage.getItem('todos') || '[]'),\n  );\n  const [activeTodos, setActiveTodos] = useState<Todo[]>([]);\n  const [completedTodos, setCompletedTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n\n    setActiveTodos(todos.filter(todo => !todo.completed));\n    setCompletedTodos(todos.filter(todo => todo.completed));\n  }, [todos]);\n\n  const contextValue: ContextType = {\n    todos,\n    setTodos,\n    activeTodos,\n    setActiveTodos,\n    completedTodos,\n    setCompletedTodos,\n    visibleTodos,\n    setVisibleTodos,\n  };\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport { TodosContext } from '../TodosContext';\n\nexport const TodoPanel: React.FC = () => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const { todos, setTodos } = useContext(TodosContext);\n\n  const addTodo = (title:string) => {\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    return newTodo;\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newTodoTitle) {\n      setTodos([\n        ...todos,\n        addTodo(newTodoTitle),\n      ]);\n\n      setNewTodoTitle('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodoTitle}\n        onChange={handleTitleChange}\n      />\n    </form>\n  );\n};\n","import React from 'react';\nimport { TodoPanel } from '../TodoPanel';\n\nexport const Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <TodoPanel />\n    </header>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodosContext } from '../TodosContext';\n\nexport const ToggleAll: React.FC = () => {\n  const {\n    todos, setTodos, activeTodos,\n  } = useContext(TodosContext);\n\n  const handleToggleAllChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setTodos(\n      todos.map(todo => {\n        return {\n          ...todo,\n          completed: event.target.checked,\n        };\n      }),\n    );\n  };\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={activeTodos.length === 0}\n        onChange={handleToggleAllChange}\n\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  useContext, useState, useRef, useEffect,\n} from 'react';\nimport classNames from 'classnames';\nimport { TodosContext } from '../TodosContext';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [focused, setFocused] = useState(false);\n  const [editedTodoTitle, setEditedTodoTitle] = useState(todo.title);\n  const inputEditEl = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputEditEl.current) {\n      inputEditEl.current.focus();\n    }\n  }, [focused]);\n\n  const toggleChange = (todoId: number): void => {\n    setTodos(\n      todos.map(todoItem => {\n        if (todoItem.id === todoId) {\n          return {\n            ...todoItem,\n            completed: !todoItem.completed,\n          };\n        }\n\n        return todoItem;\n      }),\n    );\n  };\n\n  const removeTodo = (todoId: number): void => {\n    setTodos(\n      todos.filter(todoItem => todoItem.id !== todoId),\n    );\n  };\n\n  const handleFocus = () => {\n    setFocused(true);\n  };\n\n  const handleEditTitleChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEditedTodoTitle(event.target.value);\n  };\n\n  const editingTitleTodo = (editedTitle: string, todoId: number): void => {\n    if (!editedTitle.length) {\n      setTodos(todos);\n      setEditedTodoTitle(todo.title);\n    } else {\n      setTodos(\n        todos.map(todoItem => {\n          if (todoItem.id === todoId) {\n            return {\n              ...todoItem,\n              title: editedTitle,\n            };\n          }\n\n          return todoItem;\n        }),\n      );\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Enter') {\n      editingTitleTodo(editedTodoTitle, todo.id);\n      setFocused(false);\n    }\n\n    if (event.code === 'Escape') {\n      setEditedTodoTitle(todo.title);\n      setFocused(false);\n    }\n  };\n\n  const handleBlur = () => {\n    editingTitleTodo(editedTodoTitle, todo.id);\n    setFocused(false);\n  };\n\n  return (\n    <li\n      className={classNames(\n        {\n          completed: todo.completed,\n          editing: focused,\n        },\n      )}\n\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => toggleChange(todo.id)}\n\n        />\n        <label onDoubleClick={handleFocus}>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        ref={inputEditEl}\n        value={editedTodoTitle}\n        onChange={handleEditTitleChange}\n        onKeyDown={handleKeyDown}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodosContext } from '../TodosContext';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const { visibleTodos } = useContext(TodosContext);\n\n  return (\n    <ul className=\"todo-list\">\n      {visibleTodos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { ToggleAll } from '../ToggleAll';\nimport { TodoList } from '../TodoList';\n\nexport const SectionMain: React.FC = () => {\n  return (\n    <section className=\"main\">\n      <ToggleAll />\n      <TodoList />\n    </section>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport classNames from 'classnames';\nimport { TodosContext } from '../TodosContext';\n\nexport const TodosFilter: React.FC = () => {\n  const [filterType, setFilterType] = useState('all');\n  const { todos, setVisibleTodos } = useContext(TodosContext);\n\n  const filterTypeChange = (type: string): void => {\n    setFilterType(type);\n  };\n\n  useEffect(() => {\n    switch (filterType) {\n      case 'active':\n        setVisibleTodos(todos.filter(todo => !todo.completed));\n        break;\n      case 'completed':\n        setVisibleTodos(todos.filter(todo => todo.completed));\n        break;\n      default:\n        setVisibleTodos(todos);\n        break;\n    }\n  }, [filterType, todos]);\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: filterType === 'all' })}\n          onClick={() => filterTypeChange('all')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: filterType === 'active' })}\n          onClick={() => filterTypeChange('active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: filterType === 'completed' })}\n          onClick={() => filterTypeChange('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodosContext } from '../TodosContext';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport const Footer: React.FC = () => {\n  const {\n    todos, setTodos, activeTodos, completedTodos,\n  } = useContext(TodosContext);\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {activeTodos.length}\n        {' '}\n        items left\n      </span>\n\n      <TodosFilter />\n\n      {completedTodos.length > 0 && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodosContext } from '../TodosContext';\nimport { Header } from '../Header';\nimport { SectionMain } from '../SectionMain';\nimport { Footer } from '../Footer';\n\nexport const TodoApp: React.FC = () => {\n  const { todos } = useContext(TodosContext);\n\n  return (\n    <>\n      <Header />\n      { todos.length > 0 && (\n        <>\n          <SectionMain />\n          <Footer />\n        </>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodosProvider } from './components/TodosContext';\nimport { TodoApp } from './components/TodoApp';\n\nconst App: React.FC = () => {\n  return (\n    <TodosProvider>\n      <section className=\"todoapp\">\n        <TodoApp />\n      </section>\n    </TodosProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}